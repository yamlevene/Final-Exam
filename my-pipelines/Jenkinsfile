pipeline {
    agent any

    environment {

        DOCKERHUB_CREDENTIALS = 'bbe5ca05-9786-4077-a0ae-7a3269cf3cf5'
        IMAGE_NAME = 'flask-aws-monitor'
        REPO_NAME = 'final-exam'
        DOCKER_REGISTRY = 'yamlevene'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Cloning the repository from GitHub
                git branch: 'Dev', url: 'https://github.com/yamlevene/Final-Exam.git'
            }
        }

        stage('Parallel Checks') {
            parallel {
                stage('Linting') {
                    steps {
                        script {
                            // Running Python linting with Flake8
                            sh 'echo MOCK: pip install flake8'
                            sh 'echo MOCK: flake8 .'

                            // Running Shell linting with ShellCheck
                            sh 'echo MOCK: apt-get install -y shellcheck'
                            sh 'echo MOCK: shellcheck $(find . -name "*.sh")'

                            // Running Dockerfile linting with Hadolint
                            sh 'echo MOCK: curl -sL https://github.com/hadolint/hadolint/releases/download/v2.9.1/hadolint-Linux-x86_64 -o /usr/local/bin/hadolint'
                            sh 'echo MOCK: chmod +x /usr/local/bin/hadolint'
                            sh 'echo MOCK: hadolint Dockerfile'
                        }
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        script {
                            // Running Python security check with Bandit
                            sh 'echo MOCK: pip install bandit'
                            sh 'echo MOCK: bandit -r .'

                            // Running Docker security scan with Trivy
                            sh 'echo MOCK: curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.19.2/trivy_0.19.2_Linux-x86_64.deb -o trivy.deb'
                            sh 'echo MOCK: dpkg -i trivy.deb'
                            sh 'echo MOCK: trivy image --exit-code 0 --no-progress your-dockerhub-username/flask-aws-monitor'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh "docker build -f docker-build/Dockerfile -t ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG} docker-build/"
                    sh "docker tag ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${REPO_NAME}:latest"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub using stored credentials
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    sh "docker push ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"
                    sh "docker push ${DOCKER_REGISTRY}/${REPO_NAME}:latest"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
